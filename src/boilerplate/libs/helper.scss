.h {
    @include breakpoint("sm and up") {
        &-float {
            float: left;

            &-right {
                float: right;
            }
        }

        &-clear {
            clear: both;

            &-left {
                clear: left;
            }

            &-right {
                clear: right;
            }
        }
    }

    &-background {
        background: {
            position: center center;
            repeat  : no-repeat;
        }

        &-cover {
            @extend .h-background;
            background-size: cover;
        }
    }

    // position

    &-relative {
        position: relative;
        width   : 100%;
        height  : 100%;
    }

    &-fixed {
        position: fixed;
    }

    &-absolute {
        position: absolute;
    }

    // display

    &-inline-block {
        display: inline-block;
    }

    &-block {
        display: block;
    }

    &-reset {
        @include reset;
    }

    &-white-space-pre-line {
        white-space: pre-line;
    }
    // flexbox

    &-flex {
        display: flex;

        @for $i from 1 through 6 {
            &-grow-#{$i} {
                flex-grow: $i;
            }
        }
    }
    // z-index

    &-z-index {
        display: flex;

        @for $z from 1 through 10 {
            &-#{$z * 10} {
                z-index: $z * 10;
            }
        }
    }

    &-text {
        &-center {
            text-align: center;
        }

        &-left {
            text-align: left;
        }

        &-right {
            text-align: right;
        }

        &-justify {
            text-align: justify;
        }

        &-ellipsis {
            text-overflow: ellipsis;
            overflow-x   : hidden;
            white-space  : nowrap;
        }
    }

    &-margin {
        margin: $grid-spacing;

        &-halved {
            margin: $grid-spacing / 2;
        }

        &-top {
            margin-top: $grid-spacing;

            &-halved {
                margin-top: $grid-spacing / 2;
            }
        }

        &-right {
            margin-right: $grid-spacing;

            &-halved {
                margin-right: $grid-spacing / 2;
            }
        }

        &-bottom {
            margin-bottom: $grid-spacing;

            &-halved {
                margin-bottom: $grid-spacing / 2;
            }
        }

        &-left {
            margin-left: $grid-spacing;

            &-halved {
                margin-left: $grid-spacing / 2;
            }
        }

        &-negative {
            margin: -$grid-spacing;

            &-halved {
                margin: $grid-spacing / -2;
            }

            &-top {
                margin-top: -$grid-spacing;

                &-halved {
                    margin-top: $grid-spacing / -2;
                }
            }

            &-right {
                margin-right: -$grid-spacing;

                &-halved {
                    margin-right: $grid-spacing / -2;
                }
            }

            &-bottom {
                margin-bottom: -$grid-spacing;

                &-halved {
                    margin-bottom: $grid-spacing / -2;
                }
            }

            &-left {
                margin-left: -$grid-spacing;

                &-halved {
                    margin-left: $grid-spacing / -2;
                }
            }
        }

        &-remove {
            margin: 0;

            &-top {
                margin-top: 0;
            }

            &-right {
                margin-right: 0;
            }

            &-bottom {
                margin-bottom: 0;
            }

            &-left {
                margin-left: 0;
            }
        }
    }

    // extras

    &-cover-all {
        position: absolute;
        top     : 0;
        left    : 0;
        right   : 0;
        bottom  : 0;
    }

    &-responsive-img {
        display: block;
        width  : 100%;
        height : 100%;
        max    : {
            width : 100%;
            height: 100%;
        }
    }
}

@include breakpoint("sm and up") {
    figure.h-float-right,
    img.h-float-right {
        float : right;
        margin: 0 0 0 $grid-spacing;
    }
}

@include breakpoint("sm and up") {
    figure.h-float-left,
    img.h-float-left {
        float : left;
        margin: 0 $grid-spacing 0 0;
    }
}

// ------------------------------------------------------------- Hide Helper ---

.h-xs-hidden {
    @include breakpoint("xs") {
        display: none;
    }
}

.h-sm-hidden {
    @include breakpoint("sm") {
        display: none;
    }
}

.h-sm-and-up-hidden {
    @include breakpoint("sm and up") {
        display: none;
    }
}

.h-md-hidden {
    @include breakpoint("md") {
        display: none;
    }
}

.h-md-and-up-hidden {
    @include breakpoint("md and up") {
        display: none;
    }
}

.h-lg-hidden {
    @include breakpoint("lg") {
        display: none;
    }
}

.h-xl-hidden {
    @include breakpoint("xl") {
        display: none;
    }
}

.h-xxl-hidden {
    @include breakpoint("xxl") {
        display: none;
    }
}

// ---------------------------------------------------- Pure-CSS add Padding ---

.pure-g.pure-padded-children {
    margin: {
        left : -$grid-spacing;
        right: -$grid-spacing;
    };

    > [class*="pure-u"] {
        padding: {
            left : $grid-spacing;
            right: $grid-spacing;
        };
    }

    &-halved {
        margin: {
            left : -$grid-spacing / 2;
            right: -$grid-spacing / 2;
        };

        > [class*="pure-u"] {
            padding: {
                left : $grid-spacing / 2;
                right: $grid-spacing / 2;
            };
        }
    }
}

// ----------------------------------------------- Preservable Aspect Ratios ---

@mixin aspect-ratio($width, $height) {
    position: relative;
    width   : 100%;
    height  : 100%;

    &:before {
        display    : block;
        content    : "";
        width      : 100%;
        padding-top: $height / $width * 100%;
    }

    > * {
        position: absolute;
        top     : 0;
        left    : 0;
        right   : 0;
        bottom  : 0;
    }
}

.h-aspect-ratio {
    &-1 {
        @include aspect-ratio(1, 1);
    }

    &-16-9 {
        @include aspect-ratio(16, 9);
    }

    &-16-10 {
        @include aspect-ratio(16, 10);
    }

    @for $w from 1 through 4 {
        &-#{$w} {
            @for $h from 1 through 4 {
                @if $w != $h {
                    &-#{$h} {
                        @include aspect-ratio($w, $h);
                    }
                }
            }
        }
    }
}
