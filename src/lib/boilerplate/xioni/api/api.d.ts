/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping
         * @description Receive a ping, send a pong
         */
        get: operations["ping"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Health check */
        post: operations["healthCheck"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/articles/{moduleId}/{articleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get article by id */
        get: operations["getArticle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/articles/{moduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get articles by module */
        get: operations["getArticles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/events/{moduleId}/{eventId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event by id */
        get: operations["getEvent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/events/{moduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get events by module */
        get: operations["getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/gallery/{moduleId}/{albumId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get album by id */
        get: operations["getAlbum"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/gallery/{moduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get albums by module */
        get: operations["getAlbums"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/menu-card/{moduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get menu card by id */
        get: operations["getMenuCard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/addressbook/{moduleId}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all categories for module */
        get: operations["getCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/addressbook/{moduleId}/categories/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get category by id */
        get: operations["getCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/addressbook/{moduleId}/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get root entries for module */
        get: operations["getEntries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mailer/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send message */
        post: operations["sendMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/downloads/{moduleId}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get categories by module */
        get: operations["getFileDownloadCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/downloads/{moduleId}/categories/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get category by id */
        get: operations["getFileDownloadCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cms/downloads/{moduleId}/downloads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get top level downloads by module */
        get: operations["getFileDownloads"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Pong */
        Pong: {
            ping: string;
        };
        /** @description API health status */
        HealthStatus: {
            context: string;
            model: {
                name: string;
                datastore: string;
                managed: boolean;
            };
            datastore: {
                id: string;
                status: string;
            };
            user: {
                id: number;
                name: string;
                superuser: boolean;
            };
        };
        /** @description Article */
        Article: {
            id: number;
            module: number;
            slug: string;
            title: string;
            /** Format: date */
            date: string;
            teaser: string;
            image?: components["schemas"]["Image"] | null;
            pdf?: components["schemas"]["PDF"] | null;
            /** Format: url */
            website?: string | null;
            author?: string | null;
            content?: components["schemas"]["ArticleParagraph"][];
        };
        /** @description ArticleParagraph */
        ArticleParagraph: {
            id: number;
            title?: string | null;
            text?: string | null;
            image?: components["schemas"]["Image"] | null;
        };
        /** @description Articles */
        Articles: {
            articles: components["schemas"]["Article"][];
            meta: {
                totalCount?: number;
            };
        };
        /** @description Event */
        Event: {
            id: number;
            module: number;
            slug: string;
            title: string;
            teaser?: string;
            description?: string | null;
            address?: string | null;
            /** Format: date */
            starts: string;
            /** Format: date */
            ends: string;
            image?: components["schemas"]["Image"] | null;
            pdf?: components["schemas"]["PDF"] | null;
            website?: string | null;
            url?: string | null;
            ticketshopURL?: string | null;
            organizer?: string | null;
            coordinates?: null | [
                number,
                number
            ];
            flags?: string[];
            tags?: {
                id: number;
                name: string;
            }[];
            images?: components["schemas"]["Image"][];
        };
        /** @description Events */
        Events: {
            events: components["schemas"]["Event"][];
            meta: {
                totalCount?: number;
            };
        };
        /** @description Photo Album */
        PhotoAlbum: {
            id: number;
            module: number;
            title: string;
            slug: string;
            images?: components["schemas"]["Image"][];
        };
        /** @description Photo Albums */
        PhotoAlbums: {
            albums: components["schemas"]["PhotoAlbum"][];
            meta: {
                totalCount?: number;
            };
        };
        /** @description Menu card */
        MenuCard: {
            menuCard?: {
                name: string;
                description?: string | null;
                items: {
                    id: number;
                    name: string;
                    description?: string | null;
                    price?: {
                        value?: number;
                        formatted?: string;
                    } | null;
                    image?: components["schemas"]["Image"];
                }[];
            }[];
        };
        /** @description AddressbookEntries */
        AddressbookEntries: {
            entries: components["schemas"]["AddressbookEntry"][];
            meta: {
                totalEntryCount?: number;
            };
        };
        /** @description AddressbookEntry */
        AddressbookEntry: {
            id: number;
            module: number;
            title?: string | null;
            subtitle?: string | null;
            name?: string | null;
            room?: string | null;
            address?: string | null;
            zip?: string | null;
            city?: string | null;
            phone?: string | null;
            mobile?: string | null;
            fax?: string | null;
            /** Format: email */
            email?: string | null;
            /** Format: url */
            web?: string | null;
            description?: string | null;
            priority?: number | null;
            alpha?: string | null;
            image?: components["schemas"]["Image"] | null;
            keywords?: string | null;
        };
        /** @description Addressbook category */
        AddressbookCategory: {
            id: number;
            module: number;
            priority: number | null;
            title: string | null;
            entries?: (components["schemas"]["AddressbookEntry"] | null)[] | null;
        };
        /** @description Addressbook categories */
        AddressbookCategories: {
            categories: components["schemas"]["AddressbookCategory"][];
            meta: {
                totalCategoryCount?: number;
            };
        };
        /** @description Message request body */
        MailerMessageRequestBody: {
            /** @description Module id */
            "module-id": number;
            /** Format: email */
            email: string;
        } & {
            [key: string]: unknown;
        };
        /** @description FileDownloads */
        FileDownloads: {
            downloads: components["schemas"]["FileDownload"][];
            meta: {
                totalDownloadCount?: number;
            };
        };
        /** @description File Download */
        FileDownload: {
            id: number;
            module: number;
            category?: number;
            title: string;
            number?: string;
            description?: string;
            priority?: number;
            filename: string;
            path: string;
            size: number;
            thumb?: string;
            /** Format: date */
            date: string;
            url: string;
            image?: components["schemas"]["Image"];
        };
        /** @description File Download Category */
        FileDownloadCategory: {
            id: number;
            module: number;
            title?: string;
            priority: number;
            downloads?: components["schemas"]["FileDownload"][];
        };
        /** @description File Download Category */
        FileDownloadCategories: {
            categories: components["schemas"]["FileDownloadCategory"][];
            meta: {
                totalCategoryCount: number;
            };
        };
        /** @description Image */
        Image: {
            src: string;
            description?: string | null;
            align?: ("left" | "right" | "wide" | "auto") | null;
            srcset?: {
                small?: string;
            };
        };
        /** @description PDF */
        PDF: {
            src: string;
            title?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description Article id */
        articleId: number;
        /** @description Return archived items */
        articleQueryArchived: boolean;
        /** @description Return articles created after given date */
        articleQueryCreatedAfter: string;
        /** @description Return articles created before given date */
        articleQueryCreatedBefore: string;
        /** @description Return given parts (comma separated) */
        articleQueryParts: "content"[];
        /** @description Event id */
        eventId: number;
        /** @description Return events that end after given date */
        eventQueryEndsAfter: string;
        /** @description Return events that start after given date */
        eventQueryStartsAfter: string;
        /** @description Return events that end before given date */
        eventQueryEndsBefore: string;
        /** @description Return given parts (comma separated) */
        eventQueryParts: ("flags" | "tags" | "images")[];
        /** @description Album id */
        albumId: number;
        /** @description Category id */
        addressbookCategoryId: number;
        /** @description Include given fields (comma separated) */
        addressbookQueryInclude: "entries"[];
        /** @description category id */
        categoryId: number;
        /** @description Include given fields (comma separated) */
        downloadsQueryInclude: "downloads"[];
        /** @description Module id */
        moduleId: number;
        /** @description Return up to given number of items */
        limit: number;
        /** @description Skip given number of items */
        offset: number;
        /** @description Order by property (prepend "-" to reverse order) */
        order: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaPong = components['schemas']['Pong'];
export type SchemaHealthStatus = components['schemas']['HealthStatus'];
export type SchemaArticle = components['schemas']['Article'];
export type SchemaArticleParagraph = components['schemas']['ArticleParagraph'];
export type SchemaArticles = components['schemas']['Articles'];
export type SchemaEvent = components['schemas']['Event'];
export type SchemaEvents = components['schemas']['Events'];
export type SchemaPhotoAlbum = components['schemas']['PhotoAlbum'];
export type SchemaPhotoAlbums = components['schemas']['PhotoAlbums'];
export type SchemaMenuCard = components['schemas']['MenuCard'];
export type SchemaAddressbookEntries = components['schemas']['AddressbookEntries'];
export type SchemaAddressbookEntry = components['schemas']['AddressbookEntry'];
export type SchemaAddressbookCategory = components['schemas']['AddressbookCategory'];
export type SchemaAddressbookCategories = components['schemas']['AddressbookCategories'];
export type SchemaMailerMessageRequestBody = components['schemas']['MailerMessageRequestBody'];
export type SchemaFileDownloads = components['schemas']['FileDownloads'];
export type SchemaFileDownload = components['schemas']['FileDownload'];
export type SchemaFileDownloadCategory = components['schemas']['FileDownloadCategory'];
export type SchemaFileDownloadCategories = components['schemas']['FileDownloadCategories'];
export type SchemaImage = components['schemas']['Image'];
export type SchemaPdf = components['schemas']['PDF'];
export type ParameterArticleId = components['parameters']['articleId'];
export type ParameterArticleQueryArchived = components['parameters']['articleQueryArchived'];
export type ParameterArticleQueryCreatedAfter = components['parameters']['articleQueryCreatedAfter'];
export type ParameterArticleQueryCreatedBefore = components['parameters']['articleQueryCreatedBefore'];
export type ParameterArticleQueryParts = components['parameters']['articleQueryParts'];
export type ParameterEventId = components['parameters']['eventId'];
export type ParameterEventQueryEndsAfter = components['parameters']['eventQueryEndsAfter'];
export type ParameterEventQueryStartsAfter = components['parameters']['eventQueryStartsAfter'];
export type ParameterEventQueryEndsBefore = components['parameters']['eventQueryEndsBefore'];
export type ParameterEventQueryParts = components['parameters']['eventQueryParts'];
export type ParameterAlbumId = components['parameters']['albumId'];
export type ParameterAddressbookCategoryId = components['parameters']['addressbookCategoryId'];
export type ParameterAddressbookQueryInclude = components['parameters']['addressbookQueryInclude'];
export type ParameterCategoryId = components['parameters']['categoryId'];
export type ParameterDownloadsQueryInclude = components['parameters']['downloadsQueryInclude'];
export type ParameterModuleId = components['parameters']['moduleId'];
export type ParameterLimit = components['parameters']['limit'];
export type ParameterOffset = components['parameters']['offset'];
export type ParameterOrder = components['parameters']['order'];
export type $defs = Record<string, never>;
export interface operations {
    ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pong */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pong"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthStatus"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArticle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
                /** @description Article id */
                articleId: components["parameters"]["articleId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Article */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        article: components["schemas"]["Article"];
                    };
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getArticles: {
        parameters: {
            query?: {
                /** @description Return up to given number of items */
                limit?: components["parameters"]["limit"];
                /** @description Skip given number of items */
                offset?: components["parameters"]["offset"];
                /** @description Order by property (prepend "-" to reverse order) */
                order?: components["parameters"]["order"];
                /** @description Return archived items */
                archived?: components["parameters"]["articleQueryArchived"];
                /** @description Return articles created after given date */
                createdAfter?: components["parameters"]["articleQueryCreatedAfter"];
                /** @description Return articles created before given date */
                createdBefore?: components["parameters"]["articleQueryCreatedBefore"];
                /** @description Return given parts (comma separated) */
                parts?: components["parameters"]["articleQueryParts"];
            };
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Article */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Articles"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
                /** @description Event id */
                eventId: components["parameters"]["eventId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        event?: components["schemas"]["Event"];
                    };
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEvents: {
        parameters: {
            query?: {
                /** @description Return up to given number of items */
                limit?: components["parameters"]["limit"];
                /** @description Skip given number of items */
                offset?: components["parameters"]["offset"];
                /** @description Order by property (prepend "-" to reverse order) */
                order?: components["parameters"]["order"];
                /** @description Return events that end after given date */
                endsAfter?: components["parameters"]["eventQueryEndsAfter"];
                /** @description Return events that start after given date */
                startsAfter?: components["parameters"]["eventQueryStartsAfter"];
                /** @description Return events that end before given date */
                endsBefore?: components["parameters"]["eventQueryEndsBefore"];
                /** @description Return given parts (comma separated) */
                parts?: components["parameters"]["eventQueryParts"];
            };
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Events"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAlbum: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
                /** @description Album id */
                albumId: components["parameters"]["albumId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Album */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        album: components["schemas"]["PhotoAlbum"];
                    };
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAlbums: {
        parameters: {
            query?: {
                /** @description Return up to given number of items */
                limit?: components["parameters"]["limit"];
                /** @description Skip given number of items */
                offset?: components["parameters"]["offset"];
                /** @description Order by property (prepend "-" to reverse order) */
                order?: components["parameters"]["order"];
            };
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Album */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PhotoAlbums"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMenuCard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Menu card */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuCard"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCategories: {
        parameters: {
            query?: {
                /** @description Return up to given number of items */
                limit?: components["parameters"]["limit"];
                /** @description Skip given number of items */
                offset?: components["parameters"]["offset"];
                /** @description Order by property (prepend "-" to reverse order) */
                order?: components["parameters"]["order"];
                /** @description Include given fields (comma separated) */
                include?: components["parameters"]["addressbookQueryInclude"];
            };
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Addressbook category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressbookCategories"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCategory: {
        parameters: {
            query?: {
                /** @description Return up to given number of items */
                limit?: components["parameters"]["limit"];
                /** @description Skip given number of items */
                offset?: components["parameters"]["offset"];
                /** @description Order by property (prepend "-" to reverse order) */
                order?: components["parameters"]["order"];
                /** @description Include given fields (comma separated) */
                include?: components["parameters"]["addressbookQueryInclude"];
            };
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
                /** @description Category id */
                categoryId: components["parameters"]["addressbookCategoryId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Addressbook category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        category?: components["schemas"]["AddressbookCategory"];
                        meta?: {
                            totalEntryCount?: number;
                        };
                    };
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEntries: {
        parameters: {
            query?: {
                /** @description Return up to given number of items */
                limit?: components["parameters"]["limit"];
                /** @description Skip given number of items */
                offset?: components["parameters"]["offset"];
                /** @description Order by property (prepend "-" to reverse order) */
                order?: components["parameters"]["order"];
            };
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Addressbook entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressbookEntries"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Message data */
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["MailerMessageRequestBody"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            /** @description Server error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFileDownloadCategories: {
        parameters: {
            query?: {
                /** @description Return up to given number of items */
                limit?: components["parameters"]["limit"];
                /** @description Skip given number of items */
                offset?: components["parameters"]["offset"];
                /** @description Order by property (prepend "-" to reverse order) */
                order?: components["parameters"]["order"];
                /** @description Include given fields (comma separated) */
                include?: components["parameters"]["downloadsQueryInclude"];
            };
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDownloadCategories"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFileDownloadCategory: {
        parameters: {
            query?: {
                /** @description Include given fields (comma separated) */
                include?: components["parameters"]["downloadsQueryInclude"];
                /** @description Return up to given number of items */
                limit?: components["parameters"]["limit"];
                /** @description Skip given number of items */
                offset?: components["parameters"]["offset"];
                /** @description Order by property (prepend "-" to reverse order) */
                order?: components["parameters"]["order"];
            };
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
                /** @description category id */
                categoryId: components["parameters"]["categoryId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        category: components["schemas"]["FileDownloadCategory"];
                    };
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFileDownloads: {
        parameters: {
            query?: {
                /** @description Return up to given number of items */
                limit?: components["parameters"]["limit"];
                /** @description Skip given number of items */
                offset?: components["parameters"]["offset"];
                /** @description Order by property (prepend "-" to reverse order) */
                order?: components["parameters"]["order"];
            };
            header?: never;
            path: {
                /** @description Module id */
                moduleId: components["parameters"]["moduleId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description download */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDownloads"];
                };
            };
            /** @description Client error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export enum ApiPaths {
    ping = "/ping",
    healthCheck = "/health",
    getArticle = "/cms/articles/{moduleId}/{articleId}",
    getArticles = "/cms/articles/{moduleId}",
    getEvent = "/cms/events/{moduleId}/{eventId}",
    getEvents = "/cms/events/{moduleId}",
    getAlbum = "/cms/gallery/{moduleId}/{albumId}",
    getAlbums = "/cms/gallery/{moduleId}",
    getMenuCard = "/cms/menu-card/{moduleId}",
    getCategories = "/cms/addressbook/{moduleId}/categories",
    getCategory = "/cms/addressbook/{moduleId}/categories/{categoryId}",
    getEntries = "/cms/addressbook/{moduleId}/entries",
    sendMessage = "/mailer/message",
    getFileDownloadCategories = "/cms/downloads/{moduleId}/categories",
    getFileDownloadCategory = "/cms/downloads/{moduleId}/categories/{categoryId}",
    getFileDownloads = "/cms/downloads/{moduleId}/downloads"
}
